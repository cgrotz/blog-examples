# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 8085
    filter_chains:
      - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              route_config:
                name: local_route
                virtual_hosts:
                  - name: local_service
                    domains: ["*"]
                    routes:
                      - match: { prefix: "/" }
                        route:
                          cluster: svc_hello
                          auto_host_rewrite: true
              http_filters:
                # This LUA snippet, moves the original Authorization header to X-Forwarded-Authorization if present, and then clears the header. 
                - name: envoy.filters.http.lua
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                    inline_code: |
                      function envoy_on_request(request_handle)
                        if( request_handle:headers():get("Authorization") == nil or request_handle:headers():get("Authorization") == '') then
                          request_handle:logInfo("No Authorization header set")
                        else
                          request_handle:logInfo("Switching Authorization header")
                          request_handle:headers():add("X-Forwarded-Authorization", request_handle:headers():get("Authorization"))
                          request_handle:headers():remove("Authorization")
                        end
                      end
                - name: envoy.filters.http.gcp_authn
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig          
                    http_uri: 
                      uri: "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=[AUDIENCE]"
                      cluster: gcp_metadata_server
                      timeout: 1s
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
    - name: svc_hello
      type: strict_dns
      connect_timeout: 20s
      http2_protocol_options: {}
      lb_policy: round_robin
      dns_refresh_rate: 90s
      metadata:
        typed_filter_metadata:
          envoy.filters.http.gcp_authn:
            "@type": type.googleapis.com/envoy.extensions.filters.http.gcp_authn.v3.Audience
            url: "https://<service_id>.a.run.app"   
      load_assignment:
        cluster_name: svc_hello
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: <service_id>.a.run.app
                      port_value: 443
      dns_lookup_family: V4_ONLY
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            alpn_protocols: h2
            validation_context:
              trusted_ca:
                filename: /etc/ssl/certs/ca-certificates.crt
          sni: <service_id>.a.run.app
    - name: gcp_metadata_server
      connect_timeout: 5000s
      type: strict_dns
      lb_policy: round_robin
      load_assignment:
        cluster_name: gcp_metadata_server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: metadata.google.internal
                      port_value: 80
